{"ast":null,"code":"import * as actions from '../actions/general.act'; // import * as Functions from '../common/functions/functions';\n// const axios = require('axios');\n\nexport default (function (store) {\n  return function (next) {\n    return function (action) {\n      if (action.type == 'API') {\n        var _action$payload = action.payload,\n            type = _action$payload.type,\n            method = _action$payload.method,\n            index = _action$payload.index,\n            newData = _action$payload.newData,\n            newDatas = _action$payload.newDatas,\n            id = _action$payload.id,\n            currentDb = _action$payload.currentDb;\n        var api = {\n          'get': function get(data) {\n            store.dispatch(actions.api(type, data));\n          },\n          'post': function post(newMovie) {\n            store.dispatch(actions.api(type, newMovie));\n          },\n          'put': function put() {\n            store.dispatch(actions.api(type, newDatas));\n          },\n          'delete': function _delete() {\n            store.dispatch(actions.api(type, newDatas));\n          }\n        };\n\n        if (type == 'ADD') {// let title = newData.title.replace(' ', '+');\n          // axios.get(OMDb_API + '&t=' + title + '&y=' + newData.year).then((respone) => {\n          //     if (!respone.data.respone) {\n          //         return;\n          //     }\n          //     let newMovie = respone.data;\n          //     newMovie['id'] = id;\n          //     if (!Functions.isMovieExist(currentDb, newMovie.imdbID)) {\n          //         api[method](newMovie);\n          //         store.dispatch(actions.isMovieExist(false))\n          //     }\n          //     else {\n          //         store.dispatch(actions.isMovieExist(true))\n          //     }\n          // })\n          //     .catch((err) => console.log(err))\n        } else {\n          api[method]();\n        }\n      }\n\n      return next(action);\n    };\n  };\n});","map":{"version":3,"sources":["C:\\Users\\shalombar\\Desktop\\codeValueTest\\initialize_react_redux_app\\src\\middleware\\general.mid.js"],"names":["actions","store","next","action","type","payload","method","index","newData","newDatas","id","currentDb","api","data","dispatch","newMovie"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,wBAAzB,C,CACA;AAEA;;AAEA,gBAAe,UAAAC,KAAK;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AACtC,UAAIA,MAAM,CAACC,IAAP,IAAe,KAAnB,EAA0B;AAAA,8BAG0CD,MAAM,CAACE,OAHjD;AAAA,YAGhBD,IAHgB,mBAGhBA,IAHgB;AAAA,YAGVE,MAHU,mBAGVA,MAHU;AAAA,YAGFC,KAHE,mBAGFA,KAHE;AAAA,YAGKC,OAHL,mBAGKA,OAHL;AAAA,YAGcC,QAHd,mBAGcA,QAHd;AAAA,YAGwBC,EAHxB,mBAGwBA,EAHxB;AAAA,YAG4BC,SAH5B,mBAG4BA,SAH5B;AAKtB,YAAIC,GAAG,GAAG;AACN,iBAAO,aAACC,IAAD,EAAU;AACbZ,YAAAA,KAAK,CAACa,QAAN,CAAed,OAAO,CAACY,GAAR,CAAYR,IAAZ,EAAkBS,IAAlB,CAAf;AACH,WAHK;AAIN,kBAAQ,cAACE,QAAD,EAAc;AAClBd,YAAAA,KAAK,CAACa,QAAN,CAAed,OAAO,CAACY,GAAR,CAAYR,IAAZ,EAAkBW,QAAlB,CAAf;AACH,WANK;AAON,iBAAO,eAAM;AACTd,YAAAA,KAAK,CAACa,QAAN,CAAed,OAAO,CAACY,GAAR,CAAYR,IAAZ,EAAkBK,QAAlB,CAAf;AACH,WATK;AAUN,oBAAU,mBAAM;AACZR,YAAAA,KAAK,CAACa,QAAN,CAAed,OAAO,CAACY,GAAR,CAAYR,IAAZ,EAAkBK,QAAlB,CAAf;AACH;AAZK,SAAV;;AAeA,YAAIL,IAAI,IAAI,KAAZ,EAAmB,CACf;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,SApBD,MAqBK;AACDQ,UAAAA,GAAG,CAACN,MAAD,CAAH;AACH;AACJ;;AACD,aAAOJ,IAAI,CAACC,MAAD,CAAX;AACH,KA/C2B;AAAA,GAAR;AAAA,CAApB","sourcesContent":["import * as actions from '../actions/general.act';\r\n// import * as Functions from '../common/functions/functions';\r\n\r\n// const axios = require('axios');\r\n\r\nexport default store => next => action => {\r\n    if (action.type == 'API') {\r\n     \r\n\r\n        let { type, method, index, newData, newDatas, id, currentDb } = action.payload;\r\n\r\n        let api = {\r\n            'get': (data) => {\r\n                store.dispatch(actions.api(type, data))\r\n            },\r\n            'post': (newMovie) => {\r\n                store.dispatch(actions.api(type, newMovie))\r\n            },\r\n            'put': () => {\r\n                store.dispatch(actions.api(type, newDatas))\r\n            },\r\n            'delete': () => {\r\n                store.dispatch(actions.api(type, newDatas))\r\n            }\r\n        }\r\n\r\n        if (type == 'ADD') {\r\n            // let title = newData.title.replace(' ', '+');\r\n\r\n            // axios.get(OMDb_API + '&t=' + title + '&y=' + newData.year).then((respone) => {\r\n            //     if (!respone.data.respone) {\r\n            //         return;\r\n            //     }\r\n\r\n            //     let newMovie = respone.data;\r\n\r\n            //     newMovie['id'] = id;\r\n            //     if (!Functions.isMovieExist(currentDb, newMovie.imdbID)) {\r\n            //         api[method](newMovie);\r\n            //         store.dispatch(actions.isMovieExist(false))\r\n            //     }\r\n            //     else {\r\n            //         store.dispatch(actions.isMovieExist(true))\r\n            //     }\r\n            // })\r\n            //     .catch((err) => console.log(err))\r\n        }\r\n        else {\r\n            api[method]();\r\n        }\r\n    }\r\n    return next(action)\r\n}"]},"metadata":{},"sourceType":"module"}