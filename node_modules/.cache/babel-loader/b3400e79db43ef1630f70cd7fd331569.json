{"ast":null,"code":"import * as actions from '../actions/general.act';\nimport * as Functions from '../common/functions/functions'; // const axios = require('axios');\n\nexport default (function (store) {\n  return function (next) {\n    return function (action) {\n      if (action.type == 'API') {\n        var _action$payload = action.payload,\n            type = _action$payload.type,\n            method = _action$payload.method,\n            index = _action$payload.index,\n            newData = _action$payload.newData,\n            newDatas = _action$payload.newDatas,\n            id = _action$payload.id,\n            currentDb = _action$payload.currentDb;\n        var api = {\n          'get': function get(data) {\n            store.dispatch(actions.api(type, data));\n          },\n          'post': function post(newMovie) {\n            store.dispatch(actions.api(type, newMovie));\n          },\n          'put': function put() {\n            store.dispatch(actions.api(type, newDatas));\n          },\n          'delete': function _delete() {\n            store.dispatch(actions.api(type, newDatas));\n          }\n        };\n\n        if (type == 'ADD') {\n          var newProduct = newData;\n\n          if (!Functions.isProductExistByTitle(currentDb, newProduct.Name)) {\n            api[method](newProduct);\n            store.dispatch(actions.isProductExist(false));\n          } else {\n            store.dispatch(actions.isProductExist(true));\n          }\n        } else {\n          api[method]();\n        }\n      }\n\n      return next(action);\n    };\n  };\n});","map":{"version":3,"sources":["C:\\Users\\shalombar\\Desktop\\codeValueTest\\initialize_react_redux_app\\src\\middleware\\general.mid.js"],"names":["actions","Functions","store","next","action","type","payload","method","index","newData","newDatas","id","currentDb","api","data","dispatch","newMovie","newProduct","isProductExistByTitle","Name","isProductExist"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,wBAAzB;AACA,OAAO,KAAKC,SAAZ,MAA2B,+BAA3B,C,CAEA;;AAEA,gBAAe,UAAAC,KAAK;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AACtC,UAAIA,MAAM,CAACC,IAAP,IAAe,KAAnB,EAA0B;AAAA,8BAG0CD,MAAM,CAACE,OAHjD;AAAA,YAGhBD,IAHgB,mBAGhBA,IAHgB;AAAA,YAGVE,MAHU,mBAGVA,MAHU;AAAA,YAGFC,KAHE,mBAGFA,KAHE;AAAA,YAGKC,OAHL,mBAGKA,OAHL;AAAA,YAGcC,QAHd,mBAGcA,QAHd;AAAA,YAGwBC,EAHxB,mBAGwBA,EAHxB;AAAA,YAG4BC,SAH5B,mBAG4BA,SAH5B;AAKtB,YAAIC,GAAG,GAAG;AACN,iBAAO,aAACC,IAAD,EAAU;AACbZ,YAAAA,KAAK,CAACa,QAAN,CAAef,OAAO,CAACa,GAAR,CAAYR,IAAZ,EAAkBS,IAAlB,CAAf;AACH,WAHK;AAIN,kBAAQ,cAACE,QAAD,EAAc;AAClBd,YAAAA,KAAK,CAACa,QAAN,CAAef,OAAO,CAACa,GAAR,CAAYR,IAAZ,EAAkBW,QAAlB,CAAf;AACH,WANK;AAON,iBAAO,eAAM;AACTd,YAAAA,KAAK,CAACa,QAAN,CAAef,OAAO,CAACa,GAAR,CAAYR,IAAZ,EAAkBK,QAAlB,CAAf;AACH,WATK;AAUN,oBAAU,mBAAM;AACZR,YAAAA,KAAK,CAACa,QAAN,CAAef,OAAO,CAACa,GAAR,CAAYR,IAAZ,EAAkBK,QAAlB,CAAf;AACH;AAZK,SAAV;;AAeA,YAAIL,IAAI,IAAI,KAAZ,EAAmB;AACf,cAAIY,UAAU,GAAGR,OAAjB;;AAEA,cAAI,CAACR,SAAS,CAACiB,qBAAV,CAAgCN,SAAhC,EAA2CK,UAAU,CAACE,IAAtD,CAAL,EAAkE;AAC9DN,YAAAA,GAAG,CAACN,MAAD,CAAH,CAAYU,UAAZ;AACAf,YAAAA,KAAK,CAACa,QAAN,CAAef,OAAO,CAACoB,cAAR,CAAuB,KAAvB,CAAf;AACH,WAHD,MAIK;AACDlB,YAAAA,KAAK,CAACa,QAAN,CAAef,OAAO,CAACoB,cAAR,CAAuB,IAAvB,CAAf;AACH;AACJ,SAVD,MAWK;AACDP,UAAAA,GAAG,CAACN,MAAD,CAAH;AACH;AACJ;;AACD,aAAOJ,IAAI,CAACC,MAAD,CAAX;AACH,KArC2B;AAAA,GAAR;AAAA,CAApB","sourcesContent":["import * as actions from '../actions/general.act';\r\nimport * as Functions from '../common/functions/functions';\r\n\r\n// const axios = require('axios');\r\n\r\nexport default store => next => action => {\r\n    if (action.type == 'API') {\r\n\r\n\r\n        let { type, method, index, newData, newDatas, id, currentDb } = action.payload;\r\n\r\n        let api = {\r\n            'get': (data) => {\r\n                store.dispatch(actions.api(type, data))\r\n            },\r\n            'post': (newMovie) => {\r\n                store.dispatch(actions.api(type, newMovie))\r\n            },\r\n            'put': () => {\r\n                store.dispatch(actions.api(type, newDatas))\r\n            },\r\n            'delete': () => {\r\n                store.dispatch(actions.api(type, newDatas))\r\n            }\r\n        }\r\n\r\n        if (type == 'ADD') {\r\n            let newProduct = newData\r\n\r\n            if (!Functions.isProductExistByTitle(currentDb, newProduct.Name)) {\r\n                api[method](newProduct);\r\n                store.dispatch(actions.isProductExist(false))\r\n            }\r\n            else {\r\n                store.dispatch(actions.isProductExist(true))\r\n            }\r\n        }\r\n        else {\r\n            api[method]();\r\n        }\r\n    }\r\n    return next(action)\r\n}"]},"metadata":{},"sourceType":"module"}